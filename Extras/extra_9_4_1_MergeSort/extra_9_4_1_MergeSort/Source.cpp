#include <iostream>
#include <vector>
using namespace std;

vector<int> mergeSort(vector <int>&);
vector<int> merge(vector <int>&, vector <int>&);

int main()
{
    vector<int> v = { 144, 788, 830, 816, 801, 763, 182, 978, 516, 273, 111, 45, 337, 372, 604, 899, 470, 324, 736, 690, 842, 607, 69, 537, 425, 168, 105, 29, 701, 580, 56, 118, 864, 783, 573, 872, 49, 531, 704, 750, 11, 980, 165, 75, 104, 813, 764, 489, 142, 398, 721, 824, 626, 378, 233, 774, 383, 773, 89, 640, 2, 731, 738, 226, 732, 307, 782, 900, 95, 407, 555, 747, 374, 501, 123, 999, 333, 624, 606, 153, 221, 443, 426, 458, 421, 525, 993, 162, 327, 124, 976, 838, 539, 33, 568, 3, 408, 91, 283, 832, 318, 215, 601, 677, 687, 257, 126, 888, 852, 697, 411, 498, 28, 663, 397, 455, 481, 270, 648, 935, 996, 757, 14, 977, 661, 745, 627, 680, 53, 495, 515, 803, 100, 843, 646, 588, 128, 540, 275, 610, 707, 514, 873, 522, 463, 969, 662, 364, 949, 771, 274, 805, 797, 195, 708, 399, 739, 133, 786, 415, 459, 970, 457, 256, 334, 951, 668, 691, 173, 827, 258, 10, 405, 68, 330, 188, 853, 752, 814, 151, 313, 325, 8, 551, 260, 817, 295, 390, 928, 424, 117, 139, 586, 946, 350, 156, 585, 213, 284, 653, 309, 207, 833, 742, 57, 255, 400, 718, 686, 893, 7, 373, 631, 765, 906, 650, 890, 320, 534, 34, 596, 263, 79, 268, 35, 189, 164, 16, 958, 808, 614, 119, 758, 172, 140, 582, 338, 902, 743, 981, 157, 695, 769, 563, 550, 866, 427, 548, 340, 30, 276, 312, 24, 566, 220, 523, 505, 4, 845, 972, 591, 242, 755, 705, 395, 51, 659, 419, 38, 77, 239, 812, 787, 110, 230, 675, 715, 746, 860, 584, 205, 597, 642, 647, 170, 754, 475, 422, 367, 506, 897, 187, 272, 216, 238, 530, 250, 280, 473, 987, 70, 357, 335, 804, 862, 440, 809, 197, 196, 317, 199, 355, 136, 871, 87, 37, 500, 186, 780, 356, 793, 932, 497, 222, 950, 919, 321, 730, 895, 785, 975, 719, 947, 198, 603, 822, 386, 471, 363, 720, 468, 857, 712, 297, 449, 352, 865, 884, 982, 82, 850, 959, 622, 174, 428, 368, 560, 435, 487, 159, 438, 630, 169, 641, 467, 478, 454, 262, 161, 628, 441, 858, 485, 722, 983, 218, 431, 44, 929, 666, 54, 181, 587, 846, 891, 760, 916, 296, 561, 552, 964, 253, 240, 269, 849, 665, 576, 447, 753, 484, 331, 417, 936, 595, 632, 775, 915, 365, 281, 48, 851, 579, 651, 966, 728, 235, 767, 249, 856, 520, 543, 979, 513, 259, 944, 271, 499, 210, 693, 461, 879, 913, 818, 494, 141, 861, 319, 418, 429, 920, 815, 667, 669, 264, 310, 593, 967, 219, 138, 90, 791, 492, 387, 420, 896, 391, 602, 149, 83, 968, 510, 912, 536, 20, 557, 952, 789, 381, 737, 702, 541, 482, 190, 150, 894, 826, 323, 450, 556, 116, 430, 385, 287, 448, 961, 558, 224, 223, 974, 436, 717, 517, 823, 654, 74, 696, 776, 86, 80, 112, 466, 528, 942, 130, 476, 332, 625, 998, 633, 293, 370, 97, 480, 740, 820, 12, 778, 107, 237, 99, 909, 836, 798, 549, 660, 569, 474, 621, 908, 844, 236, 369, 76, 772, 59, 741, 469, 15, 434, 821, 989, 924, 252, 795, 229, 671, 191, 937, 134, 300, 361, 393, 203, 553, 464, 127, 943, 322, 121, 115, 930, 613, 328, 184, 85, 84, 285, 228, 132, 43, 870, 940, 859, 725, 839, 655, 209, 855, 887, 922, 254, 509, 13, 40, 194, 592, 726, 158, 483, 304, 402, 47, 412, 911, 409, 841, 36, 679, 533, 575, 125, 344, 934, 874, 175, 709, 64, 379, 724, 343, 956, 963, 103, 347, 615, 635, 265, 605, 185, 453, 574, 629, 366, 152, 547, 878, 526, 810, 423, 244, 23, 456, 404, 583, 42, 311, 135, 18, 177, 62, 192, 590, 770, 611, 416, 351, 973, 527, 73, 620, 148, 382, 145, 206, 204, 834, 465, 848, 711, 735, 683, 933, 339, 336, 694, 609, 971, 345, 955, 225, 508, 892, 55, 360, 957, 524, 27, 684, 392, 22, 208, 414, 689, 511, 554, 577, 9, 394, 594, 825, 261, 25, 384, 507, 171, 488, 692, 266, 565, 886, 490, 570, 493, 723, 502, 291, 938, 885, 882, 649, 794, 460, 898, 302, 106, 109, 796, 880, 637, 349, 681, 926, 761, 670, 766, 96, 837, 532, 63, 451, 167, 995, 348, 403, 286, 108, 674, 346, 645, 246, 315, 72, 664, 608, 362, 61, 129, 78, 71, 559, 92, 314, 39, 811, 598, 925, 94, 636, 638, 714, 945, 682, 6, 377, 564, 939, 799, 359, 282, 212, 616, 876, 652, 176, 50, 234, 439, 503, 881, 542, 288, 762, 544, 354, 93, 120, 619, 828, 154, 305, 66, 326, 155, 114, 991, 688, 88, 905, 19, 990, 751, 910, 806, 713, 617, 375, 442, 353, 5, 538, 634, 521, 612, 388, 0, 41, 193, 678, 179, 676, 954, 599, 101, 406, 729, 829, 948, 918, 479, 52, 445, 923, 277, 496, 231, 883, 202, 545, 316, 831, 685, 301, 358, 243, 446, 658, 965, 371, 931, 733, 903, 657, 278, 137, 901, 567, 143, 166, 376, 800, 779, 535, 673, 413, 267, 31, 299, 578, 401, 241, 618, 907, 519, 716, 960, 768, 217, 781, 889, 183, 581, 790, 904, 546, 644, 589, 749, 279, 477, 941, 32, 306, 341, 847, 984, 46, 491, 562, 854, 819, 329, 308, 17, 756, 643, 65, 997, 802, 792, 863, 962, 201, 988, 921, 699, 248, 710, 472, 113, 529, 58, 994, 163, 444, 600, 131, 953, 251, 727, 211, 21, 26, 986, 777, 410, 227, 672, 81, 744, 147, 342, 914, 214, 294, 656, 146, 840, 807, 389, 748, 102, 759, 868, 623, 639, 698, 700, 867, 452, 512, 180, 734, 992, 462, 292, 927, 232, 437, 877, 200, 703, 917, 380, 290, 518, 289, 486, 1, 122, 571, 245, 160, 572, 396, 98, 875, 178, 835, 985, 298, 784, 433, 60, 247, 706, 303, 504, 432, 67, 869 };
    cout << "mergeSortTest was ";
    for (int i = 0; i < v.size(); ++i)
    {
        cout << v[i] << " ";
    }
    cout << endl;

    v = mergeSort(v);
    cout << "*cast mergeSort*\n Now mergeSortTest is ";
    for (int i = 0; i < v.size(); ++i)
    {
        cout << v[i] << " ";
    }
    cout << endl << endl << endl;

    bool sorted = true;
    for (int i = 0; i < v.size() - 1; ++i)
    {
        if (v[i] > v[i + 1])
            sorted = false;
    }

    if (sorted)
    {
        cout << "Yes, this vector is sorted properly";
    }
    else cout << "No, that vector is not sorted properly.\n";
}

vector<int> mergeSort(vector <int>& v)
{
    if (v.size() == 1) return v;

    
    //else keep splitting
    //let's make our halves...
    vector<int> left, right;
    {
        //first half...
        for (int i = 0; i < v.size() / 2; ++i)
            left.push_back(v[i]);
        //second half...
        for (int i = v.size() / 2; i < v.size(); ++i)
            right.push_back(v[i]);
    }
    mergeSort(left); 
    mergeSort(right);

    v = merge(left, right);
    return v;
}

vector<int> merge(vector <int>& left, vector <int>& right)
{
    vector<int> toReturn;
    while (left.size() > 0 && right.size() > 0) //while both are not empty
    {
        if (left[0] < right[0])
        {
            toReturn.push_back(left[0]);
            left.erase(left.begin()); //removes from left
        }
        else //right[0] must be smaller
        {
            toReturn.push_back(right[0]);
            right.erase(right.begin()); //removes from right
        }
    }
    //one list must have been emptied, we use while loops to check
    while (left.size() > 0)
    {
        toReturn.push_back(left[0]);
        left.erase(left.begin());
    }
    while (right.size() > 0)
    {
        toReturn.push_back(right[0]);
        right.erase(right.begin());
    }

    return toReturn;
}
